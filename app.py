# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iCH11_9-kUoEPFknF-F7F7Tdp_FlNVL9
"""

# -*- coding: utf-8 -*-
"""app.py

Ky'ra Internship Dashboard for Streamlit Cloud.
Consolidates authentication, Supabase database, dashboard, chat, tickets, and report generation.
"""
#!pip install supabase

#!pip install streamlit
#!pip install sendgrid
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tempfile
import base64
import hashlib
import uuid
from datetime import datetime
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from supabase import create_client, Client
import sendgrid
from sendgrid.helpers.mail import Mail, Email, To, Content
import io
import os

# Install required packages (run in terminal or add to requirements.txt):
# pip install streamlit pandas matplotlib seaborn supabase sendgrid-python pillow

# --- Streamlit Config ---
st.set_page_config(page_title="Ky'ra Internship Dashboard", layout="wide", initial_sidebar_state="expanded")
sns.set_style("whitegrid")

# --- Supabase Config (Replace with your Supabase URL and Key) ---
SUPABASE_URL = "https://gptaggdnnhxdermrwxjl.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdwdGFnZ2Rubmh4ZGVybXJ3eGpsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1Mzk4NTcsImV4cCI6MjA2MjExNTg1N30.jYRJ_T2MJw0v6qQIcvvcSUu-7x4fG_DRzYK3nwTZ6-A"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- SendGrid Config (Replace with your SendGrid API Key) ---
SENDGRID_API_KEY = "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"
sg = sendgrid.SendGridAPIClient(SENDGRID_API_KEY)

# --- Ky’ra Brand Palette ---
PRIMARY_COLOR = "#50C878"  # Emerald Green
ACCENT_COLOR = "#FFD700"   # Soft Gold
BG_COLOR = "#FAF9F6"       # Light Ivory
TEXT_COLOR = "#333333"     # Deep Charcoal

# --- Custom CSS for UI Consistency ---
st.markdown("""
<style>
body {font-family: 'Poppins', sans-serif; background-color: #FAF9F6; color: #333333;}
h1, h2, h3 {color: #50C878; font-weight: 600;}
.stButton>button {
    background-color: #50C878;
    color: white;
    border-radius: 8px;
    border: none;
    padding: 10px 20px;
}
.stButton>button:hover {
    background-color: #FFD700;
    color: #333333;
}
.sidebar .sidebar-content {background-color: #FAF9F6;}
.stMetric {background-color: white; padding: 10px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);}
.custom-button {
    background-color: #50C878;
    color: white;
    padding: 10px 20px;
    border-radius: 8px;
    text-align: center;
    cursor: pointer;
}
.centered-section {
    padding: 20px;
    text-align: center;
}
</style>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

# --- Mock Users (Updated Credentials) ---
USERS = {
    "student_beta@example.com": {"name": "Alice Beta", "password": hashlib.sha256("kyra_student2025".encode()).hexdigest(), "role": "Student"},
    "college_beta@example.com": {"name": "Prof. Smith Beta", "password": hashlib.sha256("kyra_college2025".encode()).hexdigest(), "role": "College"},
    "msme_beta@example.com": {"name": "MSME Corp Beta", "password": hashlib.sha256("kyra_msme2025".encode()).hexdigest(), "role": "MSME"},
    "mentor_beta@example.com": {"name": "Dr. Jones Beta", "password": hashlib.sha256("kyra_mentor2025".encode()).hexdigest(), "role": "Mentor"},
    "gov_beta@example.com": {"name": "Gov Official Beta", "password": hashlib.sha256("kyra_gov2025".encode()).hexdigest(), "role": "Government"}
}

GREETINGS = {
    "Student": "Welcome, [Name]! Ky’ra is here to guide your journey. Let’s begin! \U0001F31F",
    "College": "Hello, [Name]! Ready to empower your students? Ky’ra is with you. \U0001F4DA",
    "MSME": "Hi, [Name]! Let’s transform your business with Ky’ra’s support! \U0001F680",
    "Mentor": "Welcome, [Name]! Your wisdom shapes futures. Let’s start! \U0001F4A1",
    "Government": "Greetings, [Name]! Driving impact with Ky’ra’s insights. \U0001F3DB"
}

MOTIVATIONAL_PROMPTS = {
    "no_progress": "You’re just starting! Log your first step with Ky’ra to shine! \U0001F680",
    "some_progress": "Great work! You’re moving forward – Ky’ra sees your progress! \U0001F4AA",
    "high_progress": "You’re a star! Keep shining with Ky’ra by your side! \U0001F31F"
}

# --- Authentication ---
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def authenticate_user(email, password, role):
    user_data = USERS.get(email)
    if user_data and user_data["password"] == hash_password(password) and user_data["role"] == role:
        try:
            user = supabase.table("users").select("*").eq("email", email).execute()
            if not user.data:
                supabase.table("users").insert({
                    "name": user_data["name"],
                    "email": email,
                    "role": role
                }).execute()
            return {"email": email, "name": user_data["name"], "role": role}
        except Exception as e:
            st.error(f"Authentication error: {str(e)}")
            return None
    return None

# --- Database Operations (Supabase) ---
@st.cache_data(ttl=300)
def fetch_user_data(email):
    try:
        user = supabase.table("users").select("user_id, name, role").eq("email", email).single().execute()
        if not user.data:
            return None

        internships = supabase.table("internships").select("*").eq("user_id", user.data["user_id"]).execute().data
        courses = supabase.table("courses").select("*").eq("user_id", user.data["user_id"]).execute().data

        return {
            "user_id": user.data["user_id"],
            "name": user.data["name"],
            "role": user.data["role"],
            "internships": internships,
            "courses": courses
        }
    except Exception as e:
        st.error(f"Error fetching user data: {str(e)}")
        return None

def log_internship(email, company, duration, feedback, msme_digitalized):
    try:
        user = supabase.table("users").select("user_id").eq("email", email).single().execute()
        if not user.data:
            name = email.split("@")[0].capitalize()
            user = supabase.table("users").insert({"name": name, "email": email, "role": "Student"}).execute()
            user_id = user.data[0]["user_id"]
        else:
            user_id = user.data["user_id"]

        supabase.table("internships").insert({
            "user_id": user_id,
            "company_name": company,
            "duration": duration,
            "feedback": feedback,
            "msme_digitalized": msme_digitalized
        }).execute()
        fetch_user_data.clear()
        return True
    except Exception as e:
        st.error(f"Error logging internship: {str(e)}")
        return False

def log_course_progress(email, course_name, modules_completed, total_modules):
    try:
        user = supabase.table("users").select("user_id").eq("email", email).single().execute()
        if user.data:
            user_id = user.data["user_id"]
            supabase.table("courses").upsert({
                "user_id": user_id,
                "course_name": course_name,
                "modules_completed": modules_completed,
                "total_modules": total_modules
            }).execute()
            fetch_user_data.clear()
            return True
        return False
    except Exception as e:
        st.error(f"Error logging course progress: {str(e)}")
        return False

@st.cache_data(ttl=300)
def fetch_metrics(role):
    try:
        internships = supabase.table("internships").select("msme_digitalized").eq("user_id", supabase.table("users").select("user_id").eq("role", role)).execute().data
        courses = supabase.table("courses").select("*").eq("user_id", supabase.table("users").select("user_id").eq("role", role)).execute().data
        total_msmes = sum([i["msme_digitalized"] for i in internships]) if internships else 0
        return {
            "total_internships": len(internships),
            "total_msmes": total_msmes,
            "total_courses": len(courses)
        }
    except Exception as e:
        st.error(f"Error fetching metrics: {str(e)}")
        return {"total_internships": 0, "total_msmes": 0, "total_courses": 0}

@st.cache_data(ttl=300)
def fetch_reports(role):
    try:
        data = supabase.table("users").select("name, email, internships.company_name, internships.duration, internships.feedback, internships.msme_digitalized").eq("role", role).execute().data
        return data
    except Exception as e:
        st.error(f"Error fetching reports: {str(e)}")
        return []

def log_feedback(user_id, rating, comments):
    try:
        supabase.table("feedback").insert({
            "user_id": user_id,
            "rating": rating,
            "comments": comments
        }).execute()
        return True
    except Exception as e:
        st.error(f"Error logging feedback: {str(e)}")
        return False

# --- Internal Chat MVP ---
def render_chat(user):
    st.header("💬 Chat with Ky’ra Team")
    st.markdown("<div class='centered-section'><p>Ky’ra connects you with your trainers. Start chatting!</p></div>", unsafe_allow_html=True)

    receiver_role = st.selectbox("Send to", ["Mentor", "College"], key="chat_receiver")
    message = st.text_area("Your Message", key="chat_message")

    if st.button("Send Message", key="send_chat"):
        with st.spinner("Ky’ra is sending your message..."):
            sender = supabase.table("users").select("user_id").eq("email", user["email"]).single().execute()
            receiver = supabase.table("users").select("user_id").eq("role", receiver_role).limit(1).execute()
            if sender.data and receiver.data:
                supabase.table("messages").insert({
                    "sender_id": sender.data["user_id"],
                    "receiver_id": receiver.data[0]["user_id"],
                    "role_from": user["role"],
                    "message": message,
                    "timestamp": datetime.now().isoformat()
                }).execute()
                st.success("Message sent! Ky’ra will notify the team.")
                st.feedback("thumbs", key="chat_feedback")

    st.subheader("Your Messages")
    messages = supabase.table("messages").select("*").eq("sender_id", sender.data["user_id"]).order("timestamp", desc=True).execute().data
    for msg in messages:
        st.write(f"[{msg['timestamp']}] To {msg['receiver_id']}: {msg['message']}")

# --- Ticket System ---
def render_ticket_form(user):
    st.sidebar.header("🎫 Raise a Ticket")
    with st.sidebar.form("ticket_form"):
        subject = st.text_input("Subject")
        description = st.text_area("Description")
        urgency = st.selectbox("Urgency", ["Low", "Medium", "High"])
        submit = st.form_submit_button("Let’s Raise It")
        if submit:
            with st.spinner("Ky’ra is raising your ticket..."):
                user_id = supabase.table("users").select("user_id").eq("email", user["email"]).single().execute().data["user_id"]
                supabase.table("tickets").insert({
                    "user_id": user_id,
                    "subject": subject,
                    "description": description,
                    "urgency": urgency,
                    "timestamp": datetime.now().isoformat()
                }).execute()
                # SendGrid Email Alert
                try:
                    message = Mail(
                        from_email="support@kyra.app",
                        to_emails="admin@kyra.app",
                        subject=f"New Ticket: {subject}",
                        plain_text_content=f"User: {user['email']}\nUrgency: {urgency}\nDescription: {description}"
                    )
                    sg.send(message)
                    st.success("Ticket raised! Ky’ra has notified the team.")
                    st.feedback("thumbs", key="ticket_feedback")
                except Exception as e:
                    st.error(f"Ticket raised, but email failed: {str(e)}")

# --- File Upload ---
def render_file_upload(user):
    st.header("📎 Upload Your Work")
    st.markdown("<div class='centered-section'><p>Share your code, PPT, or reports with Ky’ra!</p></div>", unsafe_allow_html=True)
    uploaded_file = st.file_uploader("Choose a file (Code, PPT, PDF)", type=["py", "ppt", "pptx", "pdf"])
    if uploaded_file:
        with st.spinner("Ky’ra is uploading your file..."):
            file_bytes = uploaded_file.read()
            file_name = uploaded_file.name
            user_id = supabase.table("users").select("user_id").eq("email", user["email"]).single().execute().data["user_id"]
            supabase.storage.from_("Uploads").upload(f"{user_id}/{file_name}", file_bytes)
            st.success(f"File {file_name} uploaded! Ky’ra has saved it.")
            st.feedback("thumbs", key="upload_feedback")

# --- Placeholder Certificate ---
def render_certificate():
    st.header("🏆 Your Certificate")
    st.markdown("<div class='centered-section'><p>Congrats! Download your sample certificate from Ky’ra.</p></div>", unsafe_allow_html=True)
    with st.spinner("Ky’ra is preparing your download..."):
        sample_pdf = BytesIO()
        img = Image.new('RGB', (595, 842), color='white')
        draw = ImageDraw.Draw(img)
        draw.text((100, 400), "Sample Ky'ra Internship Certificate", fill='black', font=ImageFont.load_default())
        img.save(sample_pdf, format="PDF")
        st.download_button("Download Certificate", sample_pdf.getvalue(), file_name="certificate.pdf", key="cert_download")
        st.feedback("thumbs", key="cert_feedback")

# --- Admin View ---
def render_admin_view():
    st.header("📊 Admin Dashboard")
    st.markdown("<div class='centered-section'><p>Ky’ra tracks all roles for you!</p></div>", unsafe_allow_html=True)
    with st.spinner("Gathering insights..."):
        users = supabase.table("users").select("role").execute().data
        role_counts = pd.DataFrame(users).groupby("role").size().reset_index(name="count")
        st.dataframe(role_counts)
        st.feedback("thumbs", key="admin_feedback")

# --- Report Generation ---
def generate_pdf_report(report_data):
    try:
        width, height = 595, 842
        img = Image.new('RGB', (width, height), color='white')
        draw = ImageDraw.Draw(img)
        font = ImageFont.load_default()
        draw.text((100, 50), "Ky'ra Internship Report", fill='black', font=font)
        y = 100
        for entry in report_data:
            text = f"Name: {entry['name']}, Company: {entry['company_name'] or 'N/A'}, Duration: {entry['duration'] or 'N/A'}"
            draw.text((100, y), text, fill='black', font=font)
            y += 20
            if y > height - 50:
                break
        buffer = BytesIO()
        img.save(buffer, format="PNG")
        pdf_buffer = BytesIO()
        pdf_img = Image.open(buffer)
        pdf_img.save(pdf_buffer, format="PDF")
        return pdf_buffer.getvalue()
    except Exception as e:
        st.error(f"Error generating PDF: {str(e)}")
        return None

# --- Dashboard Rendering ---
def render_ticker():
    metrics = fetch_metrics("Student")
    ticker_html = """
    <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px;'>
        <marquee behavior='scroll' direction='left'>
            \U0001F31F {internships} Internships Completed | \U0001F680 {msmes} MSMEs Supported | \U0001F4DA {courses} Courses Enrolled
        </marquee>
    </div>
    """.format(
        internships=metrics["total_internships"],
        msmes=metrics["total_msmes"],
        courses=metrics["total_courses"]
    )
    st.markdown(ticker_html, unsafe_allow_html=True)

def display_motivational_prompt(user_data, role):
    if role == "Student":
        internships = len(user_data.get("internships", []))
        if internships >= 3:
            prompt = MOTIVATIONAL_PROMPTS["high_progress"]
        elif internships > 0:
            prompt = MOTIVATIONAL_PROMPTS["some_progress"]
        else:
            prompt = MOTIVATIONAL_PROMPTS["no_progress"]
        st.markdown(f"<div class='centered-section'>{prompt}</div>", unsafe_allow_html=True)

def render_student_dashboard(user):
    email = user["email"]
    user_data = fetch_user_data(email)
    if not user_data:
        st.error("User data not found. Please try logging in again.")
        return

    st.markdown(f"<div class='centered-section'><h3>Welcome, {user_data['name']}!</h3><p>Ky’ra is here to guide you. Let’s begin!</p></div>", unsafe_allow_html=True)
    display_motivational_prompt(user_data, "Student")

    st.sidebar.header("Your Journey")
    menu = ["Progress", "Log Internship", "Courses", "Feedback", "Ky’ra Chat", "Generate Report", "Upload Work", "Certificate"]
    choice = st.sidebar.selectbox("Navigate", menu, format_func=lambda x: f"📍 {x}")

    metrics = fetch_metrics("Student")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Internships Completed", metrics.get("total_internships", 0))
    with col2:
        st.metric("MSMEs Supported", metrics.get("total_msmes", 0))
    with col3:
        st.metric("Courses Enrolled", metrics.get("total_courses", 0))

    if choice == "Progress":
        st.header("📈 Your Progress")
        if user_data["internships"]:
            df = pd.DataFrame(user_data["internships"])
            st.dataframe(df)
            fig, ax = plt.subplots()
            sns.countplot(x="msme_digitalized", data=df, ax=ax, palette="viridis")
            st.pyplot(fig)
        if user_data["courses"]:
            df = pd.DataFrame(user_data["courses"])
            st.dataframe(df)
        if not user_data["internships"] and not user_data["courses"]:
            st.markdown("<div class='centered-section'>No progress yet. Log an internship or enroll in a course! 😊</div>", unsafe_allow_html=True)

    elif choice == "Log Internship":
        st.header("🛠️ Log Internship")
        with st.form("internship_form"):
            company = st.text_input("Company Name")
            duration = st.text_input("Duration (e.g., 3 months)")
            feedback = st.text_area("Feedback")
            msme_digitalized = st.number_input("MSMEs Digitalized", min_value=0)
            submit = st.form_submit_button("Let’s Move Forward")
            if submit:
                if company and duration:
                    with st.spinner("Ky’ra is saving your internship..."):
                        success = log_internship(email, company, duration, feedback, msme_digitalized)
                        if success:
                            st.success("Internship logged! Ky’ra is proud of you! 🎉")
                            st.balloons()
                            st.feedback("thumbs", key="internship_feedback")
                        else:
                            st.error("Failed to log internship.")
                else:
                    st.error("Please fill in all required fields.")

    elif choice == "Courses":
        st.header("📚 Your Courses")
        with st.form("course_form"):
            course_name = st.text_input("Course Name")
            modules_completed = st.number_input("Modules Completed", min_value=0)
            total_modules = st.number_input("Total Modules", min_value=1)
            submit = st.form_submit_button("Let’s Move Forward")
            if submit:
                if course_name and total_modules:
                    with st.spinner("Ky’ra is saving your course progress..."):
                        success = log_course_progress(email, course_name, modules_completed, total_modules)
                        if success:
                            st.success("Course progress logged! Keep learning with Ky’ra! 🌟")
                            st.feedback("thumbs", key="course_feedback")
                        else:
                            st.error("Failed to log course progress.")
                else:
                    st.error("Please fill in all required fields.")

    elif choice == "Feedback":
        st.header("🗣️ Share Feedback")
        if user_data:
            feedback_type = st.radio("Choose feedback method:", ["Star Rating", "Emoji Scale"])
            with st.form("feedback_form"):
                if feedback_type == "Star Rating":
                    rating = st.slider("Rate your experience", 1, 5, 3)
                    comments = st.text_area("Comments")
                else:
                    emoji_ratings = {"😊": 5, "🙂": 3, "😔": 1}
                    emoji = st.selectbox("How do you feel?", list(emoji_ratings.keys()))
                    rating = emoji_ratings[emoji]
                    comments = st.text_area("Comments (optional)")
                submit = st.form_submit_button("Let’s Move Forward")
                if submit:
                    with st.spinner("Ky’ra is submitting your feedback..."):
                        success = log_feedback(user_data["user_id"], rating, comments)
                        if success:
                            st.success("Thanks for your feedback! Ky’ra appreciates you! \U0001F31F")
                            st.feedback("thumbs", key="feedback_submission")
                        else:
                            st.error("Failed to submit feedback.")

    elif choice == "Ky’ra Chat":
        render_chat(user)

    elif choice == "Generate Report":
        st.header("📄 Generate Report")
        with st.spinner("Ky’ra is generating your report..."):
            report_data = fetch_reports("Student")
            if report_data:
                pdf_bytes = generate_pdf_report(report_data)
                if pdf_bytes:
                    b64_pdf = base64.b64encode(pdf_bytes).decode()
                    href = f'<a href="data:application/octet-stream;base64,{b64_pdf}" download="internship_report.pdf">📥 Download Report</a>'
                    st.markdown(href, unsafe_allow_html=True)
                    st.feedback("thumbs", key="report_feedback")
                else:
                    st.error("Failed to generate report.")
            else:
                st.markdown("<div class='centered-section'>No report data available yet.</div>", unsafe_allow_html=True)

    elif choice == "Upload Work":
        render_file_upload(user)

    elif choice == "Certificate":
        render_certificate()

def render_college_dashboard(user):
    st.header("📊 College Dashboard")
    st.markdown("<div class='centered-section'><h3>Welcome, College!</h3><p>Ky’ra supports your student success.</p></div>", unsafe_allow_html=True)
    metrics = fetch_metrics("Student")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Students Participating", metrics.get("total_internships", 0))
    with col2:
        st.metric("Projects Submitted", metrics.get("total_msmes", 0))
    with col3:
        st.metric("Courses Enrolled", metrics.get("total_courses", 0))

    st.markdown("<div class='custom-button'>View Student Performance</div>", unsafe_allow_html=True)
    st.header("Reports")
    report_data = fetch_reports("Student")
    if report_data:
        df = pd.DataFrame(report_data)
        st.dataframe(df)
        st.feedback("thumbs", key="college_report_feedback")

def render_mentor_dashboard(user):
    st.header("💡 Mentor Dashboard")
    st.markdown("<div class='centered-section'><h3>Welcome, Mentor!</h3><p>Ky’ra values your guidance.</p></div>", unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Sessions Conducted", 25)
    with col2:
        st.metric("Feedback Logged", 15)

    st.markdown("<div class='custom-button'>Guide Your Students</div>", unsafe_allow_html=True)
    st.header("Student Progress")
    report_data = fetch_reports("Student")
    if report_data:
        df = pd.DataFrame(report_data)
        st.dataframe(df)
        st.feedback("thumbs", key="mentor_report_feedback")

def render_msme_dashboard(user):
    st.header("🏢 MSME Dashboard")
    st.markdown("<div class='centered-section'><h3>Welcome, MSME!</h3><p>Ky’ra helps you digitize and grow.</p></div>", unsafe_allow_html=True)
    metrics = fetch_metrics("Student")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Projects Received", metrics.get("total_msmes", 0))
    with col2:
        st.metric("Students Matched", 10)

    st.header("Digitalization Tasks")
    with st.form("msme_task_form"):
        task = st.text_input("Task Description")
        timeline = st.date_input("Timeline")
        submit = st.form_submit_button("Let’s Move Forward")
        if submit:
            st.success("Task submitted! Ky’ra will match students soon.")
            st.feedback("thumbs", key="msme_task_feedback")

def render_government_dashboard(user):
    st.header("🏛️ Government Dashboard")
    st.markdown("<div class='centered-section'><h3>Welcome, Government!</h3><p>Ky’ra tracks your impact.</p></div>", unsafe_allow_html=True)
    metrics = fetch_metrics("Student")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Colleges Onboarded", 30)
    with col2:
        st.metric("Total Engagement", metrics.get("total_internships", 0))
    with col3:
        st.metric("Reports Downloaded", 20)

    st.markdown("<div class='custom-button'>View Regional Impact</div>", unsafe_allow_html=True)
    st.header("Program Reports")
    report_data = fetch_reports("Student")
    if report_data:
        df = pd.DataFrame(report_data)
        st.dataframe(df)
        st.feedback("thumbs", key="gov_report_feedback")

def render_dashboard(user, role):
    render_ticker()
    render_ticket_form(user)
    st.markdown(f"👤 **{role}** | {user['email']}")
    if role == "Student":
        render_student_dashboard(user)
    elif role == "College":
        render_college_dashboard(user)
    elif role == "Mentor":
        render_mentor_dashboard(user)
    elif role == "MSME":
        render_msme_dashboard(user)
    elif role == "Government":
        render_government_dashboard(user)
    elif role == "Admin":
        render_admin_view()

# --- Main Application ---
def main():
    st.markdown("<div class='centered-section'><h1>🌟 Ky'ra: Your Internship Journey Mentor</h1></div>", unsafe_allow_html=True)
    st.markdown("[Watch the Walkthrough Video](https://loom.com/your-video-link)", unsafe_allow_html=True)

    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
        st.session_state.user = None
        st.session_state.role = None

    if not st.session_state.authenticated:
        st.markdown("<div class='centered-section'><h3>Welcome to Ky’ra!</h3><p>Let’s begin your journey with Ky’ra’s guidance.</p></div>", unsafe_allow_html=True)
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("**Student** \U0001F31F<br>Track internships & upskilling", unsafe_allow_html=True)
        with col2:
            st.markdown("**College/Mentor** \U0001F4DA<br>Guide student success", unsafe_allow_html=True)
        with col3:
            st.markdown("**MSME/Government** \U0001F680<br>Drive impact & digitalization", unsafe_allow_html=True)

        with st.form("login_form"):
            email = st.text_input("Email")
            password = st.text_input("Password", type="password")
            role = st.selectbox("Role", ["Student", "College", "MSME", "Mentor", "Government", "Admin"])
            submit = st.form_submit_button("Let’s Begin")
            if submit:
                with st.spinner("Ky’ra is authenticating..."):
                    user = authenticate_user(email, password, role)
                    if user:
                        st.session_state.authenticated = True
                        st.session_state.user = user
                        st.session_state.role = role
                        st.success(f"Welcome, {user['name']}! Ky’ra is ready to guide you! \U0001F33E")
                        st.rerun()
                    else:
                        st.error("Invalid credentials. Try again with Ky’ra’s help.")
    else:
        user_name = st.session_state.user["name"]
        role = st.session_state.role
        greeting = GREETINGS.get(role, "Welcome back!").replace('[Name]', user_name)
        st.markdown(f"<div class='centered-section'>{greeting}</div>", unsafe_allow_html=True)
        render_dashboard(st.session_state.user, st.session_state.role)

if __name__ == "__main__":
    main()