# -*- coding: utf-8 -*-
"""supabase integration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19FGZPK0IO_A6ZMjMgNmzCxfA_E-VyW2f
"""

# Install required packages in Google Colab using subprocess
import os
import subprocess

subprocess.run(["pip", "install", "streamlit", "--quiet"], check=True)
subprocess.run(["pip", "install", "supabase", "--quiet"], check=True)

import streamlit as st
import hashlib
import uuid
from datetime import datetime
from io import BytesIO
from supabase import create_client, Client

# Supabase configuration
SUPABASE_URL = "https://gptaggdnnhxdermrwxjl.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdwdGFnZ2Rubmh4ZGVybXJ3eGpsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1Mzk4NTcsImV4cCI6MjA2MjExNTg1N30.jYRJ_T2MJw0v6qQIcvvcSUu-7x4fG_DRzYK3nwTZ6-A"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Mock user credentials
USERS = {
    "student_beta@example.com": {
        "name": "Alice Beta",
        "password": hashlib.sha256("kyra_student2025".encode()).hexdigest(),
        "role": "Student"
    },
    "college_beta@example.com": {
        "name": "Prof. Smith Beta",
        "password": hashlib.sha256("kyra_college2025".encode()).hexdigest(),
        "role": "College"
    },
    "msme_beta@example.com": {
        "name": "MSME Corp Beta",
        "password": hashlib.sha256("kyra_msme2025".encode()).hexdigest(),
        "role": "MSME"
    },
    "mentor_beta@example.com": {
        "name": "Dr. Jones Beta",
        "password": hashlib.sha256("kyra_mentor2025".encode()).hexdigest(),
        "role": "Mentor"
    },
    "gov_beta@example.com": {
        "name": "Gov Official Beta",
        "password": hashlib.sha256("kyra_gov2025".encode()).hexdigest(),
        "role": "Government"
    }
}

# Password hashing
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Authentication
def authenticate_user(email, password, role):
    user_data = USERS.get(email)
    if user_data and user_data["password"] == hash_password(password) and user_data["role"] == role:
        try:
            # Sign in with Supabase Auth
            response = supabase.auth.sign_in_with_password({"email": email, "password": password})
            if response.user:
                # Check or insert user in users table
                user = supabase.table("users").select("*").eq("email", email).execute()
                if not user.data:
                    supabase.table("users").insert({
                        "user_id": str(uuid.uuid4()),
                        "name": user_data["name"],
                        "email": email,
                        "role": role
                    }).execute()
                return {
                    "email": email,
                    "name": user_data["name"],
                    "role": role,
                    "user_id": response.user.id
                }
        except Exception as e:
            st.error(f"Authentication error: {str(e)}")
            return None
    return None

# CRUD Operations
def log_internship(user_id, company, duration, feedback, msme_digitalized):
    try:
        supabase.table("internships").insert({
            "user_id": user_id,
            "company_name": company,
            "duration": duration,
            "feedback": feedback,
            "msme_digitalized": msme_digitalized
        }).execute()
        return True
    except Exception as e:
        st.error(f"Error logging internship: {str(e)}")
        return False

def log_course(user_id, course_name, modules_completed, total_modules):
    try:
        supabase.table("courses").upsert({
            "user_id": user_id,
            "course_name": course_name,
            "modules_completed": modules_completed,
            "total_modules": total_modules
        }).execute()
        return True
    except Exception as e:
        st.error(f"Error logging course: {str(e)}")
        return False

def send_message(sender_id, receiver_role, message):
    try:
        receiver = supabase.table("users").select("user_id").eq("role", receiver_role).limit(1).execute()
        if receiver.data:
            supabase.table("messages").insert({
                "sender_id": sender_id,
                "receiver_id": receiver.data[0]["user_id"],
                "role_from": st.session_state.user["role"],
                "message": message,
                "timestamp": datetime.now().isoformat()
            }).execute()
            return True
        return False
    except Exception as e:
        st.error(f"Error sending message: {str(e)}")
        return False

def raise_ticket(user_id, subject, description, urgency):
    try:
        supabase.table("tickets").insert({
            "user_id": user_id,
            "subject": subject,
            "description": description,
            "urgency": urgency,
            "timestamp": datetime.now().isoformat()
        }).execute()
        return True
    except Exception as e:
        st.error(f"Error raising ticket: {str(e)}")
        return False

def log_feedback(user_id, rating, comments):
    try:
        supabase.table("feedback").insert({
            "user_id": user_id,
            "rating": rating,
            "comments": comments
        }).execute()
        return True
    except Exception as e:
        st.error(f"Error logging feedback: {str(e)}")
        return False

# File Upload to Storage
def upload_file(user_id, file):
    try:
        file_bytes = file.read()
        file_name = file.name
        supabase.storage.from_("Uploads").upload(f"{user_id}/{file_name}", file_bytes)
        return True
    except Exception as e:
        st.error(f"Error uploading file: {str(e)}")
        return False

# Real-time Subscription
def subscribe_to_messages(user_id):
    def on_message(payload):
        st.session_state.messages = supabase.table("messages").select("*").eq("receiver_id", user_id).order("timestamp", desc=True).execute().data
        st.rerun()

    try:
        supabase.table("messages").on("INSERT", on_message).subscribe()
    except Exception as e:
        st.error(f"Error subscribing to messages: {str(e)}")

# Main App
def main():
    st.set_page_config(page_title="Ky'ra Supabase Integration", layout="wide")

    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
        st.session_state.user = None
        st.session_state.messages = []

    if not st.session_state.authenticated:
        st.header("Login")
        with st.form("login_form"):
            email = st.text_input("Email")
            password = st.text_input("Password", type="password")
            role = st.selectbox("Role", ["Student", "College", "MSME", "Mentor", "Government"])
            if st.form_submit_button("Login"):
                user = authenticate_user(email, password, role)
                if user:
                    st.session_state.authenticated = True
                    st.session_state.user = user
                    subscribe_to_messages(user["user_id"])
                    st.rerun()
                else:
                    st.error("Invalid credentials.")
    else:
        st.header(f"Welcome, {st.session_state.user['name']}!")
        st.write(f"Role: {st.session_state.user['role']}")

        # Log Internship
        st.subheader("Log Internship")
        with st.form("internship_form"):
            company = st.text_input("Company Name")
            duration = st.text_input("Duration")
            feedback = st.text_area("Feedback")
            msme_digitalized = st.number_input("MSMEs Digitalized", min_value=0)
            if st.form_submit_button("Submit"):
                if log_internship(st.session_state.user["user_id"], company, duration, feedback, msme_digitalized):
                    st.success("Internship logged!")

        # Upload File
        st.subheader("Upload File")
        uploaded_file = st.file_uploader("Choose a file", type=["pdf", "py", "ppt", "pptx"])
        if uploaded_file and st.button("Upload"):
            if upload_file(st.session_state.user["user_id"], uploaded_file):
                st.success(f"File {uploaded_file.name} uploaded!")

        # Send Message
        st.subheader("Send Message")
        receiver_role = st.selectbox("To", ["Mentor", "College"])
        message = st.text_area("Message")
        if st.button("Send"):
            if send_message(st.session_state.user["user_id"], receiver_role, message):
                st.success("Message sent!")

        # Display Messages
        st.subheader("Messages")
        for msg in st.session_state.messages:
            st.write(f"[{msg['timestamp']}] From {msg['role_from']}: {msg['message']}")

        # Logout
        if st.button("Logout"):
            supabase.auth.sign_out()
            st.session_state.authenticated = False
            st.session_state.user = None
            st.session_state.messages = []
            st.rerun()

if __name__ == "__main__":
    main()